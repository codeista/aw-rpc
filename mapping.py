'''[This sets up map and methods for map tiles ]'''

from dataclasses import dataclass
from typing import List
from enum import Enum

from army import Army


# @dataclass
class MapType(Enum):
    PLAIN = 0
    WOOD = 100
    ROAD_HORT = 200
    ROAD_VERT = 201
    ROAD_NW = 202
    ROAD_NE = 203
    ROAD_SE = 204
    ROAD_SW = 205
    SWNRoad = 206
    NESRoad = 207
    WNERoad = 208
    ESWRoad = 209
    CRoad = 210
    RIVER_HORT = 300
    RIVER_VERT = 301
    RIVER_NW = 302
    RIVER_NE = 303
    RIVER_SE = 304
    RIVER_SW = 305
    SWNRiver = 306
    NESRiver = 307
    WNERiver = 308
    ESWRiver = 309
    BEACH_N = 400
    BEACH_E = 401
    BEACH_S = 402
    BEACH_W = 403
    BEACH_NW = 404
    BEACH_NE = 405
    BEACH_SE = 406
    BEACH_SW = 407
    BEACH_END_N = 408
    BEACH_END_E = 409
    BEACH_END_S = 410
    BEACH_END_W = 411
    MOUNTAIN = 500
    PIPE_HORT = 600
    PIPE_VERT = 601
    PIPE_END_NW = 602
    PIPE_END_NE = 603
    PIPE_END_SE = 604
    PIPE_END_SW = 605
    PIPE_END_N = 606
    PIPE_END_E = 607
    PIPE_END_S = 608
    PIPE_END_W = 609
    BASE_TOWER_0 = 700
    BASE_TOWER_1 = 701
    BASE_TOWER_2 = 702
    BASE_TOWER_3 = 703
    BASE_TOWER_4 = 704
    CITY = 705
    FACTORY = 706
    AIRPORT = 707
    PORT = 708
    COM_TOWER = 709
    LAB = 710
    MISSILE_SILO = 711
    EMPTY_SILO = 712
    SEA = 800
    HBridge = 900
    VBridge = 901
    REEF = 1001


# MAP1 = '''RED,BLUE
# SEA,PLAIN*2,RIVER_VERT,PLAIN*5,CITY,PLAIN*3,MOUNTAIN*2,CITY,WOOD,CITY,WOOD
# PLAIN,COM_TOWER,WOOD,RIVER_VERT,AIRPORT,PLAIN*2,FACTORY:RED,ROAD_HORT*2,CITY,PLAIN,WOOD,CITY,ROAD_HORT,ROAD_NE,PLAIN*3
# PLAIN*2,RIVER_NW,RIVER_SE,PLAIN,BEACH_NW,BEACH_N*3,BEACH_END_E,ROAD_VERT,PLAIN*4,ROAD_VERT,PLAIN*3
# WOOD,PLAIN,RIVER_VERT,PLAIN*2,BEACH_END_S,BASE_TOWER_1:RED,BEACH_W,BEACH_SE,ROAD_NW,ROAD_SE,WOOD,PLAIN*2,WOOD,ROAD_SW,ROAD_NE,CITY,PLAIN
# PLAIN,WOOD,RIVER_VERT,PLAIN*2,PORT,BEACH_NW,BEACH_SE,CITY,ROAD_SE,PLAIN,CITY,WOOD,PLAIN*2,PIPE_END_N,ROAD_VERT,PLAIN,WOOD
# PLAIN,RIVER_NW,RIVER_SE,PLAIN*2,BEACH_NW,BEACH_SE,PLAIN,WOOD,PLAIN*5,WOOD,PIPE_VERT,FACTORY:BLUE,PLAIN*2
# RIVER_HORT,RIVER_SE,PLAIN,WOOD,FACTORY,BEACH_END_S,FACTORY,PLAIN*3,MOUNTAIN,WOOD,PLAIN*3,PIPE_END_S,PLAIN*2,WOOD
# PLAIN*2,CITY,PLAIN,ROAD_SW,ROAD_HORT,ROAD_SE,PLAIN,CITY,MOUNTAIN*2,PLAIN*2,CITY,WOOD,PLAIN,WOOD,PLAIN*2
# PLAIN*2,WOOD,PLAIN,WOOD,CITY,PLAIN*2,MOUNTAIN*2,CITY,PLAIN,ROAD_NW,ROAD_HORT,ROAD_NE,PLAIN,CITY,PLAIN*2
# WOOD,PLAIN*2,PIPE_END_N,PLAIN*3,WOOD,MOUNTAIN,PLAIN*3,CITY,BEACH_END_N,FACTORY,WOOD,PLAIN,RIVER_NW,RIVER_HORT
# PLAIN*2,FACTORY:RED,PIPE_VERT,WOOD,PLAIN*5,WOOD,PLAIN,BEACH_NW,BEACH_SE,PLAIN*2,RIVER_NW,RIVER_SE,PLAIN
# WOOD,PLAIN,ROAD_VERT,PIPE_END_S,PLAIN*2,WOOD,CITY,PLAIN,ROAD_NW,CITY,BEACH_NW,BEACH_SE,PORT,PLAIN*2,RIVER_VERT,WOOD,PLAIN
# PLAIN,CITY,ROAD_SW,ROAD_NE,WOOD,PLAIN*2,WOOD,ROAD_NW,ROAD_SE,BEACH_NW,BEACH_E,BASE_TOWER_2_2:BLUE,BEACH_END_N,PLAIN*2,RIVER_VERT,PLAIN,WOOD
# PLAIN*3,ROAD_VERT,PLAIN*4,ROAD_VERT,BEACH_END_W,BEACH_S*3,BEACH_SE,PLAIN,RIVER_NW,RIVER_SE,PLAIN*2
# PLAIN*3,ROAD_SW,ROAD_HORT,CITY,WOOD,PLAIN,CITY,ROAD_HORT*2,FACTORY:BLUE,PLAIN*2,AIRPORT,RIVER_VERT,WOOD,COM_TOWER,PLAIN
# WOOD,CITY,WOOD,CITY,MOUNTAIN,MOUNTAIN,PLAIN*3,CITY,PLAIN*5,RIVER_VERT,PLAIN*2,WOOD
# '''

MAP1 = '''RED,BLUE
PORT:RED,BEACH_W,SEA*2,BEACH_S*3,SEA*3,BEACH_E,WOOD,AIRPORT:RED,WOOD,CITY,MOUNTAIN,CITY,MOUNTAIN*2
SEA*2,BEACH_S,BEACH_SE,MOUNTAIN,CITY,MOUNTAIN,BEACH_SW,BEACH_S,SEA,BEACH_E,WOOD*5,MOUNTAIN*3
SEA,BEACH_SE,CITY:RED,MOUNTAIN*5,CITY,SEA,BEACH_E,PORT,WOOD*2,FACTORY:RED,ROAD_VERT,WOOD,MOUNTAIN,CITY
BEACH_SE,MOUNTAIN*10,PLAIN,WOOD*2,PLAIN,WOOD,PLAIN,MOUNTAIN*2
LAB,MOUNTAIN*3,WOOD,WOOD,FACTORY:RED,MISSILE_SILO,WOOD,MOUNTAIN*3,PLAIN*3,ROAD_VERT,PLAIN*2,MOUNTAIN
COM_TOWER,MOUNTAIN,WOOD,PLAIN*3,WOOD*2,PLAIN*2,WOOD,MOUNTAIN*2,CITY,PLAIN,ROAD_SW,CITY,WOOD,MOUNTAIN
MISSILE_SILO,WOOD*2,PLAIN,CITY:RED,ROAD_HORT,WOOD,ROAD_HORT,CITY,WOOD,PLAIN,MOUNTAIN*2,WOOD,PLAIN*2,ROAD_VERT,PLAIN,WOOD
EMPTY_SILO,PLAIN,BASE_TOWER_1:RED,ROAD_HORT,ROAD_SE,PLAIN*3,ROAD_VERT,PLAIN*2,WOOD,MOUNTAIN,PLAIN,WOOD,PLAIN,ROAD_VERT,PLAIN*2
WOOD,PLAIN,WOOD,PLAIN*3,CITY,WOOD,CITY,PLAIN*3,MOUNTAIN,PLAIN,CITY,PLAIN*2,CITY,WOOD
WOOD,CITY,PLAIN*2,CITY,PLAIN,MOUNTAIN,PLAIN*3,CITY,WOOD,CITY,PLAIN*3,WOOD,PLAIN,WOOD
PLAIN*2,ROAD_VERT,PLAIN,WOOD,PLAIN,MOUNTAIN,WOOD,PLAIN*2,ROAD_VERT,PLAIN*3,ROAD_NW,ROAD_HORT,BASE_TOWER_1:BLUE,PLAIN,MOUNTAIN
WOOD,PLAIN,ROAD_VERT,PLAIN*2,WOOD,MOUNTAIN*2,PLAIN,WOOD,CITY,ROAD_HORT,WOOD,ROAD_HORT,CITY,PLAIN,WOOD*2,MOUNTAIN
MOUNTAIN,WOOD,CITY,ROAD_NE,PLAIN,CITY,MOUNTAIN*2,WOOD,PLAIN*2,WOOD*2,PLAIN*3,WOOD,MOUNTAIN,COM_TOWER
MOUNTAIN,PLAIN*2,ROAD_VERT,PLAIN*3,MOUNTAIN*3,WOOD,PLAIN,FACTORY:BLUE,WOOD,WOOD,MOUNTAIN*3,LAB
MOUNTAIN*2,PLAIN,WOOD,PLAIN,WOOD*2,PLAIN,MOUNTAIN*10,BEACH_NW
CITY,MOUNTAIN,WOOD,ROAD_VERT,FACTORY:BLUE,WOOD*2,PORT,BEACH_W,SEA,CITY,MOUNTAIN*5,CITY,BEACH_NW,SEA
MOUNTAIN*3,WOOD*5,BEACH_W,SEA,BEACH_N,BEACH_NE,MOUNTAIN,CITY:BLUE,MOUNTAIN,BEACH_NW,BEACH_N,SEA*2
MOUNTAIN*2,CITY,MOUNTAIN,CITY,WOOD,AIRPORT:BLUE,WOOD,BEACH_W,SEA*3,BEACH_N*3,SEA*2,BEACH_E,PORT:BLUE
'''

# Scorpion Operation
MAP1 = '''RED,BLUE
PLAIN,WOOD,RIVER_VERT,MOUNTAIN,ROAD_VERT,WOOD,PLAIN,PLAIN,CITY,PLAIN,PLAIN,WOOD,PLAIN,MOUNTAIN,RIVER_VERT,MOUNTAIN,PLAIN,CITY,PLAIN,WOOD,ROAD_VERT,PLAIN,PLAIN,CITY,MOUNTAIN
MOUNTAIN,FACTORY,RIVER_VERT,MOUNTAIN,ROAD_SW,ROAD_HORT,ROAD_NE,WOOD,PLAIN,WOOD,PLAIN,PLAIN,AIRPORT,WOOD,HBridge,FACTORY:BLUE,ROAD_NW,ROAD_SE,PLAIN,PLAIN,CITY,PLAIN,WOOD,ROAD_VERT,PLAIN
WOOD,PLAIN,RIVER_SW,RIVER_NW,WOOD,PLAIN,ROAD_VERT,WOOD,MOUNTAIN,PLAIN,BASE_TOWER_1:BLUE,PLAIN,PLAIN,RIVER_NE,RIVER_SE,ROAD_NW,ROAD_SE,WOOD,PLAIN,PLAIN,ROAD_VERT,WOOD,MOUNTAIN,ROAD_VERT,PLAIN
CITY,PLAIN,MOUNTAIN,RIVER_VERT,PLAIN,PLAIN,FACTORY:BLUE,PLAIN,MOUNTAIN,PLAIN,BEACH_NE,BEACH_NW,WOOD,RIVER_VERT,PLAIN,ROAD_VERT,PLAIN,MOUNTAIN,PLAIN,MOUNTAIN,ROAD_SW,ROAD_HORT,ROAD_HORT,ROAD_SE,WOOD
PLAIN,ROAD_NW,ROAD_HORT,HBridge,CITY,ROAD_HORT,ROAD_SE,PLAIN,CITY,MOUNTAIN,BEACH_SE,BEACH_SW,MOUNTAIN,CITY,PLAIN,CITY,MOUNTAIN,ROAD_NW,ROAD_HORT,CITY,MOUNTAIN,PLAIN,PLAIN,PLAIN,CITY
WOOD,ROAD_VERT,PLAIN,RIVER_VERT,WOOD,PLAIN,RIVER_NE,RIVER_HORT,RIVER_HORT,MOUNTAIN,CITY,ROAD_NE,WOOD,PLAIN,PLAIN,WOOD,MOUNTAIN,ROAD_VERT,MOUNTAIN,PLAIN,PLAIN,MOUNTAIN,WOOD,ROAD_NW,ROAD_HORT
MOUNTAIN,ROAD_VERT,CITY,RIVER_SW,VBridge,MOUNTAIN,RIVER_SE,CITY,PLAIN,PLAIN,WOOD,ROAD_SW,ROAD_NE,EMPTY_SILO,PLAIN,PLAIN,PLAIN,ROAD_VERT,PLAIN,MOUNTAIN,PLAIN,MOUNTAIN,PLAIN,ROAD_VERT,PLAIN
PLAIN,ROAD_VERT,PLAIN,MOUNTAIN,PLAIN,MOUNTAIN,PLAIN,ROAD_VERT,PLAIN,PLAIN,PLAIN,EMPTY_SILO,ROAD_SW,ROAD_NE,WOOD,PLAIN,PLAIN,CITY,RIVER_NE,MOUNTAIN,VBridge,RIVER_NW,CITY,ROAD_VERT,MOUNTAIN
ROAD_HORT,ROAD_SE,WOOD,MOUNTAIN,PLAIN,PLAIN,MOUNTAIN,ROAD_VERT,MOUNTAIN,WOOD,PLAIN,PLAIN,WOOD,ROAD_SW,CITY,MOUNTAIN,RIVER_HORT,RIVER_HORT,RIVER_SE,PLAIN,WOOD,RIVER_VERT,PLAIN,ROAD_VERT,WOOD
CITY,PLAIN,PLAIN,PLAIN,MOUNTAIN,CITY,ROAD_HORT,ROAD_SE,MOUNTAIN,CITY,PLAIN,CITY,MOUNTAIN,BEACH_NE,BEACH_NW,MOUNTAIN,CITY,PLAIN,ROAD_NW,ROAD_HORT,CITY,HBridge,ROAD_HORT,ROAD_SE,PLAIN
WOOD,ROAD_NW,ROAD_HORT,ROAD_HORT,ROAD_NE,MOUNTAIN,PLAIN,MOUNTAIN,PLAIN,ROAD_VERT,PLAIN,RIVER_VERT,WOOD,BEACH_SE,BEACH_SW,PLAIN,MOUNTAIN,PLAIN,FACTORY:RED,PLAIN,PLAIN,RIVER_VERT,MOUNTAIN,PLAIN,CITY
PLAIN,ROAD_VERT,MOUNTAIN,PLAIN,ROAD_VERT,PLAIN,PLAIN,WOOD,ROAD_NW,ROAD_SE,RIVER_NE,RIVER_SE,PLAIN,PLAIN,BASE_TOWER_1:RED,PLAIN,MOUNTAIN,WOOD,ROAD_VERT,PLAIN,WOOD,RIVER_SW,RIVER_NW,PLAIN,WOOD
PLAIN,ROAD_VERT,WOOD,PLAIN,CITY,PLAIN,PLAIN,ROAD_NW,ROAD_SE,FACTORY:RED,HBridge,WOOD,AIRPORT,PLAIN,PLAIN,WOOD,PLAIN,WOOD,ROAD_SW,ROAD_HORT,ROAD_NE,MOUNTAIN,RIVER_VERT,FACTORY,MOUNTAIN
MOUNTAIN,CITY,PLAIN,PLAIN,ROAD_VERT,WOOD,PLAIN,CITY,PLAIN,MOUNTAIN,RIVER_VERT,MOUNTAIN,PLAIN,WOOD,PLAIN,PLAIN,CITY,PLAIN,PLAIN,WOOD,ROAD_VERT,MOUNTAIN,RIVER_VERT,WOOD,PLAIN
'''

# test map
MAP1 = '''RED,BLUE
CRoad,ROAD_HORT*6
ROAD_VERT,PLAIN,PLAIN,FACTORY:RED,PLAIN,PLAIN,BASE_TOWER_1:RED
ROAD_VERT,PLAIN,WOOD*4,MOUNTAIN
ROAD_VERT,CITY,SEA*3,MOUNTAIN*2
ROAD_VERT,PLAIN,WOOD*4,MOUNTAIN
ROAD_VERT,PLAIN*2,FACTORY:BLUE,PLAIN,PLAIN,BASE_TOWER_1:BLUE
CRoad,ROAD_HORT,ROAD_HORT,ROAD_HORT,ROAD_HORT,ROAD_HORT,ROAD_HORT
'''


@dataclass
class MapTile():
    '''Gameboard tile class.'''
    type: MapType
    army: Army = None

    def ground_repairs(self):
        ''' true if the terrain type repairs ground units.'''
        return self.type in {MapType.CITY, MapType.FACTORY,
                             MapType.BASE_TOWER_2, MapType.BASE_TOWER_1,
                             MapType.BASE_TOWER_3, MapType.BASE_TOWER_4}

    def air_repairs(self):
        ''' true if the terrain type repairs air units.'''
        return self.type in {MapType.AIRPORT}

    def sea_repairs(self):
        ''' true if the terrain type repairs sea units.'''
        return self.type in {MapType.PORT}

    def is_capturable(self):
        ''' true if the terrain can be captured.'''
        return self.type in ({MapType.CITY, MapType.FACTORY,
                              MapType.BASE_TOWER_0, MapType.BASE_TOWER_1,
                              MapType.BASE_TOWER_2, MapType.BASE_TOWER_3,
                              MapType.COM_TOWER, MapType.PORT, MapType.AIRPORT,
                              MapType.LAB})

    def is_hq(self):
        '''Returns true if the terrain type is a HQ.'''
        return self.type in ({MapType.BASE_TOWER_0, MapType.BASE_TOWER_1,
                              MapType.BASE_TOWER_2, MapType.BASE_TOWER_3})


@dataclass
class Map():
    width: int
    height: int
    tiles: List[MapTile]
    turn_order: List[Army]

    @classmethod
    def parse(self, map_data):
        width = 0
        height = 0
        turn_order = []
        tiles = []
        column_count = 0
        for row in map_data.split('\n'):
            if row == '':
                continue
            if column_count == 0:
                for army in row.split(','):
                    turn_order.append(Army[army])
            else:
                row_count = 0
                for cell in row.split(','):
                    type = None
                    multiplier = 0
                    army = None
                    if cell.find('*') != -1:
                        type, multiplier = cell.split('*')
                    elif cell.find(':') != -1:
                        type, army = cell.split(':')
                    else:
                        type = cell
                    type = MapType[type]
                    if army:
                        army = Army[army]
                    multiplier = int(multiplier)
                    if not multiplier:
                        multiplier = 1
                    for i in range(multiplier):
                        tile = MapTile(type, army)
                        tiles.append(tile)
                        row_count += 1
                if not height:
                    width = row_count
                if width != row_count:
                    raise Exception('map rows not all equal width')
                height += 1
            column_count += 1
        return Map(width, height, tiles, turn_order)


terrain_star = {
    MapType.PLAIN: 1,
    MapType.WOOD: 2,
    MapType.ROAD_HORT: 0,
    MapType.ROAD_VERT: 0,
    MapType.ROAD_NW: 0,
    MapType.ROAD_NE: 0,
    MapType.ROAD_SE: 0,
    MapType.ROAD_SW: 0,
    MapType.CRoad: 0,
    MapType.SWNRoad: 0,
    MapType.ESWRoad: 0,
    MapType.WNERoad: 0,
    MapType.NESRoad: 0,
    MapType.ESWRiver: 0,
    MapType.SWNRiver: 0,
    MapType.WNERiver: 0,
    MapType.NESRiver: 0,
    MapType.RIVER_HORT: 0,
    MapType.RIVER_VERT: 0,
    MapType.RIVER_NW: 0,
    MapType.RIVER_NE: 0,
    MapType.RIVER_SE: 0,
    MapType.RIVER_SW: 0,
    MapType.BEACH_N: 0,
    MapType.BEACH_E: 0,
    MapType.BEACH_S: 0,
    MapType.BEACH_W: 0,
    MapType.BEACH_NW: 0,
    MapType.BEACH_NE: 0,
    MapType.BEACH_SE: 0,
    MapType.BEACH_SW: 0,
    MapType.BEACH_END_N: 0,
    MapType.BEACH_END_E: 0,
    MapType.BEACH_END_S: 0,
    MapType.BEACH_END_W: 0,
    MapType.MOUNTAIN: 4,
    MapType.BASE_TOWER_0: 4,
    MapType.BASE_TOWER_1: 4,
    MapType.BASE_TOWER_2: 4,
    MapType.BASE_TOWER_3: 4,
    MapType.BASE_TOWER_4: 4,
    MapType.CITY: 3,
    MapType.FACTORY: 3,
    MapType.AIRPORT: 3,
    MapType.PORT: 3,
    MapType.COM_TOWER: 3,
    MapType.LAB: 3,
    MapType.MISSILE_SILO: 3,
    MapType.EMPTY_SILO: 3,
    MapType.SEA: 0,
    MapType.PIPE_HORT: 0,
    MapType.PIPE_VERT: 0,
    MapType.PIPE_END_NW: 0,
    MapType.PIPE_END_NE: 0,
    MapType.PIPE_END_SE: 0,
    MapType.PIPE_END_SW: 0,
    MapType.PIPE_END_N: 0,
    MapType.PIPE_END_E: 0,
    MapType.PIPE_END_S: 0,
    MapType.PIPE_END_W: 0,
    MapType.REEF: 1,
    MapType.HBridge: 0,
    MapType.VBridge: 0,
}

INF = 99999999


movement_cost = {
    MapType.PLAIN: [1, 1, 2, INF, 1, INF, 1, INF],
    MapType.WOOD: [1, 2, 3, INF, 1, INF, 1, INF],
    MapType.ROAD_HORT: [1, 1, 1, INF, 1, INF, 1, INF],
    MapType.CRoad: [1, 1, 1, INF, 1, INF, 1, INF],
    MapType.ROAD_VERT: [1, 1, 1, INF, 1, INF, 1, INF],
    MapType.ROAD_NW: [1, 1, 1, INF, 1, INF, 1, INF],
    MapType.ROAD_NE: [1, 1, 1, INF, 1, INF, 1, INF],
    MapType.ROAD_SE: [1, 1, 1, INF, 1, INF, 1, INF],
    MapType.ROAD_SW: [1, 1, 1, INF, 1, INF, 1, INF],
    MapType.SWNRoad: [1, 1, 1, INF, 1, INF, 1, INF],
    MapType.ESWRoad: [1, 1, 1, INF, 1, INF, 1, INF],
    MapType.WNERoad: [1, 1, 1, INF, 1, INF, 1, INF],
    MapType.NESRoad: [1, 1, 1, INF, 1, INF, 1, INF],
    MapType.ESWRiver: [1, INF, INF, INF, 1, INF, 2, INF],
    MapType.SWNRiver: [1, INF, INF, INF, 1, INF, 2, INF],
    MapType.NESRiver: [1, INF, INF, INF, 1, INF, 2, INF],
    MapType.WNERiver: [1, INF, INF, INF, 1, INF, 2, INF],
    MapType.RIVER_HORT: [1, INF, INF, INF, 1, INF, 2, INF],
    MapType.RIVER_VERT: [1, INF, INF, INF, 1, INF, 2, INF],
    MapType.RIVER_NW: [1, INF, INF, INF, 1, INF, 2, INF],
    MapType.RIVER_NE: [1, INF, INF, INF, 1, INF, 2, INF],
    MapType.RIVER_SE: [1, INF, INF, INF, 1, INF, 2, INF],
    MapType.RIVER_SW: [1, INF, INF, INF, 1, INF, 2, INF],
    MapType.BEACH_N: [1, 1, 1, INF, 1, 1, 1, INF],
    MapType.BEACH_E: [1, 1, 1, INF, 1, 1, 1, INF],
    MapType.BEACH_S: [1, 1, 1, INF, 1, 1, 1, INF],
    MapType.BEACH_W: [1, 1, 1, INF, 1, 1, 1, INF],
    MapType.BEACH_NW: [1, 1, 1, INF, 1, 1, 1, INF],
    MapType.BEACH_NE: [1, 1, 1, INF, 1, 1, 1, INF],
    MapType.BEACH_SE: [1, 1, 1, INF, 1, 1, 1, INF],
    MapType.BEACH_SW: [1, 1, 1, INF, 1, 1, 1, INF],
    MapType.BEACH_END_N: [1, 1, 1, INF, 1, 1, 1, INF],
    MapType.BEACH_END_E: [1, 1, 1, INF, 1, 1, 1, INF],
    MapType.BEACH_END_S: [1, 1, 1, INF, 1, 1, 1, INF],
    MapType.BEACH_END_W: [1, 1, 1, INF, 1, 1, 1, INF],
    MapType.MOUNTAIN: [1, INF, INF, INF, 1, INF, 2, INF],
    MapType.BASE_TOWER_0: [1, 1, 1, INF, 1, INF, 1, INF],
    MapType.BASE_TOWER_1: [1, 1, 1, INF, 1, INF, 1, INF],
    MapType.BASE_TOWER_2: [1, 1, 1, INF, 1, INF, 1, INF],
    MapType.BASE_TOWER_3: [1, 1, 1, INF, 1, INF, 1, INF],
    MapType.BASE_TOWER_4: [1, 1, 1, INF, 1, INF, 1, INF],
    MapType.CITY: [1, 1, 1, INF, 1, INF, 1, INF],
    MapType.FACTORY: [1, 1, 1, INF, 1, INF, 1, INF],
    MapType.AIRPORT: [1, 1, 1, INF, 1, INF, 1, INF],
    MapType.PORT: [1, 1, 1, 1, 1, 1, 1, INF],
    MapType.COM_TOWER: [1, 1, 1, INF, 1, INF, 1, INF],
    MapType.LAB: [1, 1, 1, INF, 1, INF, 1, INF],
    MapType.MISSILE_SILO: [1, 1, 1, INF, 1, INF, 1, INF],
    MapType.EMPTY_SILO: [1, 1, 1, INF, 1, INF, 1, INF],
    MapType.SEA: [INF, INF, INF, 1, 1, 1, INF, INF],
    MapType.PIPE_HORT: [INF, INF, INF, INF, INF, INF, INF, 1],
    MapType.PIPE_VERT: [INF, INF, INF, INF, INF, INF, INF, 1],
    MapType.PIPE_END_NW: [INF, INF, INF, INF, INF, INF, INF, 1],
    MapType.PIPE_END_NE: [INF, INF, INF, INF, INF, INF, INF, 1],
    MapType.PIPE_END_SE: [INF, INF, INF, INF, INF, INF, INF, 1],
    MapType.PIPE_END_SW: [INF, INF, INF, INF, INF, INF, INF, 1],
    MapType.PIPE_END_N: [INF, INF, INF, INF, INF, INF, INF, 1],
    MapType.PIPE_END_E: [INF, INF, INF, INF, INF, INF, INF, 1],
    MapType.PIPE_END_S: [INF, INF, INF, INF, INF, INF, INF, 1],
    MapType.PIPE_END_W: [INF, INF, INF, INF, INF, INF, INF, 1],
    MapType.REEF: [INF, INF, INF, 2, 1, INF, INF, INF],
    MapType.HBridge: [1, 1, 1, INF, 1, INF, 1, INF],
    MapType.VBridge: [1, 1, 1, INF, 1, INF, 1, INF],
}
